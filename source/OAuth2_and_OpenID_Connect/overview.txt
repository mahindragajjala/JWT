                                      JWT with OAuth2 and OpenID Connect

OAuth2 is a framework for authorization.
OpenID Connect (OIDC) is a layer on top of OAuth2 for authentication.
JWT (JSON Web Token) is the token format used to securely transmit identity and access data.


Resource Owner: The user
Client: The application requesting access (e.g., frontend or mobile app)
Authorization Server: Issues tokens (e.g., Auth0, Keycloak, Okta)
Resource Server: API/backend that serves data, needs JWT for access.

          +---------+                                           +---------------+
                   --(A)- Authorization Request -------------->               
                        (with OIDC scope like 'openid')         Authorization 
            Client                                                Server     
                   <-(B)---- Authorization Code ---------------               
          +---------+                             e              +---------------+
                                                                       
                (C) Authorization Code + PKCE --> Token Request        
                                                                       
               <-(D)- JWT Access Token + ID Token + Refresh Token -----
                                                                       
                                                                       
                (E) Access Token -->                                    
                           +------------------->+-------------------+  
               +------------    API Request                          
                              Resource Server     Validates JWT    <--+
                            +-------------------+                   
                                                 +------------------+
Step A: Authorization Request
        Client redirects user to Auth Server:
        "
          GET /authorize?response_type=code
            &client_id=abc123
            &redirect_uri=https://client.com/callback
            &scope=openid profile email
            &state=xyz
            &code_challenge=hashed_code
            &code_challenge_method=S256
                                        "
Step B: User logs in
        Authorization server authenticates user (OIDC) - OpenID Connect
        Sends authorization code to the client
Step C: Token Exchange (Backchannel)
        Client sends code + PKCE verifier to get tokens:
        POST /token
            - grant_type=authorization_code
            - code=...
            - redirect_uri=...
            - code_verifier=...
Step D: Tokens Received
        Authorization server returns:
                      Access Token (JWT): For API access
                      ID Token (JWT): Contains user identity (OpenID Connect)
                      Refresh Token: To get new tokens when expired

Step E: API Call with JWT
        Client sends the access token in Authorization: Bearer <JWT>
        Resource server validates JWT (signature, expiration, etc.)
        Grants or denies access

✅ OIDC (Authentication) – Get user identity (email, name)
✅ OAuth2 (Authorization) – Get access token to call protected APIs

                              E-Commerce App with Google Login

                         Component           Example Value                                
                         Frontend App        `https://shopper.com`                        
                         Backend API Server  `https://api.shopper.com` (written in Go)    
                         Identity Provider   `Google Identity (OIDC)`                     
                         JWKS URL            `https://www.googleapis.com/oauth2/v3/certs` 
                         Token Type          JWT (signed with RS256)                      
                         Scope               `openid profile email`                       
  +------------+                                       +---------------------+
  |            |                                       |                     |
  |   Client   |                                       |  Authorization      |
  |  (Frontend |                                       |     Server (OIDC)   |
  |  or Mobile)|                                       |                     |
  +-----+------+                                       +----------+----------+
        |                                                       |
        |-----(1) Authorization Request (with PKCE)------------>|
        |       GET /authorize                                  |
        |       client_id, redirect_uri, scope, code_challenge  |
        |                                                       |
        |<----(2) User Login + Consent --------------------------|
        |                                                       |
        |<----(3) Authorization Code (via Redirect)-------------|
        |       https://client.com/callback?code=xyz            |
        |                                                       |
        |                                                       |
        |-----(4) Token Request (POST /token)------------------>|
        |       code, client_id, redirect_uri, code_verifier    |
        |                                                       |
        |<----(5) Tokens ----------------------------------------|
        |       access_token (JWT)                              |
        |       id_token (JWT, OIDC)                            |
        |       refresh_token (optional)                        |
        |                                                       |
        +-------------------+                                   |
                            |                                   |
                            |                                   |
                            v                                   v
                   +--------+---------+              +---------+--------+
                   |   Client Sends   |              |  Authorization   |
                   |   Access Token   |              |   Server (JWKS)  |
                   |   to API Server  |              |   Public Keys    |
                   +--------+---------+              +------------------+
                            |
                            |
                            v
                   +--------+---------+
                   |   API Server     |
                   | (Resource Server)|
                   +--------+---------+
                            |
        +-------------------+-----------------------------+
        | - Verifies JWT using JWKs (RS256 signature)     |
        | - Validates claims (exp, aud, iss, scope, etc.) |
        | - Authorizes user access                        |
        +-------------------------------------------------+


🔹 1. Frontend App: https://shopper.com
    ✅ What it is:
      This is the Single Page Application (SPA) or Web UI (React, Angular, etc.) where users visit to            browse and log in.

🔧 Real-time actions:
                      Displays login button (e.g. "Login with Google")
                      Redirects user to Google’s OAuth2/OIDC authorize endpoint
                      After successful login, receives a code and exchanges it for tokens
                      Stores access_token and id_token in local storage or memory
                      Sends the access_token in the Authorization: Bearer header for every API call
                  LOGIN EXAMPLE :
                  window.location.href = `https://accounts.google.com/o/oauth2/v2/auth?
                    client_id=1234567890-abc.apps.googleusercontent.com
                    &response_type=code
                    &redirect_uri=https://shopper.com/callback
                    &scope=openid profile email
                    &state=random123
                    &code_challenge=abc123
                    &code_challenge_method=S256`



                        jwt-oauth2-oidc-demo/
                        ├── auth_server/
                        │   └── main.go         # OIDC + OAuth2 token issuer
                        ├── resource_server/
                        │   └── main.go         # Token validator and resource API
                        ├── client/
                        │   └── main.go         # Client that logs in and accesses data
                        └── go.mod              # Dependencies


🔹 2. Backend API Server: https://api.shopper.com (Go)
      ✅ What it is:
      A REST API backend written in Go. It:
      Secures endpoints (e.g., /user/profile)
      Validates incoming JWTs from the frontend
      Responds with user-specific or protected data

🔧 Real-time actions:
    Receives API requests with JWTs in the Authorization header
    Uses Google's public keys to validate the JWT
    Parses claims from the JWT (e.g., sub, email, scope)
    Checks expiration (exp) and audience (aud) fields
    Serves protected data only if JWT is valid

    🔐 Example Go Middleware:
    authHeader := r.Header.Get("Authorization")
    tokenStr := strings.TrimPrefix(authHeader, "Bearer ")
    
    token, err := jwt.Parse(tokenStr, jwks.Keyfunc)
    if claims, ok := token.Claims.(jwt.MapClaims); ok && token.Valid {
        userEmail := claims["email"].(string)
        fmt.Fprintf(w, "Hello, %s", userEmail)
    }




🔹 3. Identity Provider (IdP): Google Identity (OIDC)
      ✅ What it is:
                    This is the trusted third-party service that:
                                                Authenticates the user
                                                Issues tokens (JWTs) to the frontend
                                                Provides public key infrastructure for signature validation
      Google conforms to the OpenID Connect (OIDC) spec, so it provides:
                    User login screens
                    OIDC scopes (openid, email, profile)
                    id_token (identity of user)
                    access_token (authorization for APIs)




🔹 4. JWKS URL: https://www.googleapis.com/oauth2/v3/certs
✅ What it is:
                JWKS = JSON Web Key Set
                It’s a URL where Google publishes the public keys 
                used to verify JWTs signed with RS256 (RSA private key)
            
            Your Go backend fetches this to validate the JWT's signature
            🔧 Real-time JSON response:
            {
              "keys": [
                {
                  "kty": "RSA",
                  "alg": "RS256",
                  "use": "sig",
                  "kid": "123abc",
                  "n": "...",
                  "e": "AQAB"
                }
              ]
            }
            🧠 Backend uses this in Go:
            jwksURL := "https://www.googleapis.com/oauth2/v3/certs"
            jwks, _ := keyfunc.Get(jwksURL, keyfunc.Options{})
            token, _ := jwt.Parse(tokenStr, jwks.Keyfunc)





🔹 5. Token Type: JWT (signed with RS256)
                    ✅ What it is:
                    JWT (JSON Web Token) is a secure, signed string that contains:
                    Header: alg, kid
                    Payload: user identity, issuer, audience, etc.
                    Signature: created with Google's private key
                    🔧 Example JWT Structure:
                    Header:
                    {
                      "alg": "RS256",
                      "kid": "123abc"
                    }
                    Payload:
                    {
                      "iss": "https://accounts.google.com",
                      "sub": "1122334455",
                      "email": "mahindra@example.com",
                      "aud": "1234567890-abc.apps.googleusercontent.com",
                      "exp": 1752342000
                    }
                    sub: Unique user ID (subject)
                    aud: Intended audience (your app)
                    exp: Expiry time (Unix)
                    iss: Issuer (Google)

🔹 6. Scope: openid profile email
              ✅ What it is:
              Scopes define what information or permission the client is asking from the user.
              openid → Enables OpenID Connect (user identity layer)
              profile → Full name, picture, etc.
              email → Email address of the user
            🔧 Without these scopes, Google won’t return an id_token or user info.
            🔐 Real example login URL:
            GET https://accounts.google.com/o/oauth2/v2/auth?
              client_id=1234567890-abc.apps.googleusercontent.com
              &response_type=code
              &redirect_uri=https://shopper.com/callback
              &scope=openid%20profile%20email



