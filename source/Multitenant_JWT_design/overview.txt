Designing a multitenant JWT (JSON Web Token) system requires 

carefully isolating tenants (organizations, customers, etc.) 

while securely issuing and verifying tokens. 
This is especially important in SaaS (Software as a Service) 
applications where different customers use the same app but 
with isolated data and permissions.

🔹 What is Multitenancy?
Multitenancy is a software architecture where a single instance 
of the application serves multiple tenants.

Each tenant’s data and access rights are logically 
isolated but hosted on shared infrastructure.

🔐 JWT in Multitenancy
JWT is used to authenticate and authorize users. 

In a multitenant system, JWT should carry "tenant-specific claims 
to ensure proper access and isolation".


Header.Payload.Signature
Example Payload (Basic):
                        {
                          "sub": "user123",
                          "tenant_id": "tenantA",
                          "role": "admin",
                          "exp": 1719232982,
                          "iat": 1719229382,
                          "iss": "auth.yourapp.com"
                        }


                              Design Architecture 
+--------+        +-------------+        +-------------+        +------------+
| Client | -----> | Auth Server | -----> | JWT Issuer  | -----> | App Server |
+--------+        +-------------+        +-------------+        +------------+
                       |                       |                     |
                Validates credentials     Issues JWT with          Verifies
                (per tenant rules)       tenant info in claims     signature & claims



Key Components of Design
1. Tenant Identification
Include a tenant_id claim in the token:
                                "tenant_id": "company_xyz"
This is used to:
                Identify which tenant the user belongs to.
                Enforce tenant-specific access in APIs.

2. Issuer & Audience Per Tenant (Optional but Secure)
Use iss and aud claims:
                      "iss": "auth.company_xyz.com",
                      "aud": "api.company_xyz.com"
Helps in scoped validation (one tenant can't use another's token).
Especially useful when tenants have different domains or services.

3. Signature Keys Management (IMPORTANT)
🔐 Option 1: Shared Key (simpler, less secure)
              All tenants share the same signing key (HS256 or RS256).
              Risk: if compromised, all tenants are affected.

🔐 Option 2: Per-Tenant Key (recommended for security)
              Use a different private/public key pair per tenant.
              Store keys securely (e.g., AWS KMS, Vault).
              Use kid (Key ID) in JWT header to identify which key to use.
              {
                "alg": "RS256",
                "typ": "JWT",
                "kid": "tenantA-key"
              }
              
4. Claim-Based Access Control
    Use roles and permissions tied to tenants.
                          {
                            "role": "manager",
                            "permissions": ["read:reports", "edit:profile"]
                          }
    In app middleware, check:
    Is the user from the correct tenant_id?
    Does the user have required roles/permissions?

5. Token Lifespan and Rotation
    Keep tokens short-lived (e.g., 15 mins to 1 hour).
    Use refresh tokens per tenant.
    Allow per-tenant session policies.

6. Tenant-Aware Authorization Middleware (Go Example)
      func ValidateTokenAndTenant(next http.Handler) http.Handler {
          return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
              tokenStr := ExtractTokenFromHeader(r)
              claims, err := ParseJWT(tokenStr)
              if err != nil {
                  http.Error(w, "Unauthorized", http.StatusUnauthorized)
                  return
              }
      
              tenantID := claims["tenant_id"].(string)
              if !IsTenantValid(tenantID) {
                  http.Error(w, "Invalid Tenant", http.StatusForbidden)
                  return
              }
      
               Add claims to context for further use
              ctx := context.WithValue(r.Context(), "claims", claims)
              next.ServeHTTP(w, r.WithContext(ctx))
          })
      }


Real-Life Use Case: Multitenant SaaS CRM

Scenario:
          You build a CRM used by multiple companies (tenants).
          
Each company has:
                  Their own users.
                  Their own domain (e.g., crm.companyA.com).
                  Their own data.

Design Approach:
              User logs in via custom domain (auth.companyA.com).
              Auth server authenticates user.
              
JWT is issued with:
                 sub, tenant_id, role, permissions, iss, aud, kid
                 
App APIs verify:
                Token signature
                Tenant ID matches requested tenant data
                Roles/permissions
                User accesses only their tenant-specific resources.




multitenant-jwt/
├── main.go
├── auth/
│   └── handler.go         Login and token generation
├── middleware/
│   └── tenant.go          JWT + tenant validation
├── util/
│   └── jwt.go             JWT generation and verification helpers
└── keys/
    ├── alpha_private.pem
    └── alpha_public.pem

Generate RSA Key Pair (for tenant)
      # Create private key
      openssl genpkey -algorithm RSA -out keys/alpha_private.pem -pkeyopt rsa_keygen_bits:2048
      
      # Extract public key
      openssl rsa -pubout -in keys/alpha_private.pem -out keys/alpha_public.pem


go mod tidy
go run main.go

Login
curl -X POST http:localhost:8080/login \
-H "Content-Type: application/json" \
-d '{"username":"alice","password":"pass123","tenant_id":"alpha"}'

Access Protected Route
curl -X GET http:localhost:8080/api/dashboard \
-H "Authorization: Bearer <TOKEN>" \
-H "X-Tenant-ID: alpha"


adding multiple tenants 
module github.com/yourname/multitenant-jwt

go 1.22

require (
	github.com/gin-gonic/gin v1.10.0
	github.com/golang-jwt/jwt/v5 v5.0.1
)

 Directory structure:
 multitenant-jwt/
 ├── main.go
 ├── auth/
 │   └── handler.go
 ├── middleware/
 │   └── tenant.go
 ├── util/
 │   └── jwt.go
 └── keys/
     ├── alpha_private.pem
     ├── alpha_public.pem
     ├── beta_private.pem
     └── beta_public.pem

 Notes:
 - Support for multiple tenants (alpha, beta)
 - Each tenant has its own RSA key pair for JWT signing and verification
 - Middleware ensures isolation based on tenant_id in token and header


Generate Beta Keys
# Create beta private key
openssl genpkey -algorithm RSA -out keys/beta_private.pem -pkeyopt rsa_keygen_bits:2048

# Extract beta public key
openssl rsa -pubout -in keys/beta_private.pem -out keys/beta_public.pem

                          In Update util/jwt.go
                  var tenantKeyMap = map[string]string{
                      "alpha": "keys/alpha_private.pem",
                      "beta":  "keys/beta_private.pem",
                  }
                  
                  var tenantPubMap = map[string]string{
                      "alpha": "keys/alpha_public.pem",
                      "beta":  "keys/beta_public.pem",
                  }
Update Login Logic in auth/handler.go
Support beta user login:
          if (req.Username == "alice" && req.Password == "pass123" && req.TenantID == "alpha") ||
             (req.Username == "bob" && req.Password == "pass456" && req.TenantID == "beta") {
              token, err := util.GenerateJWT(req.Username, req.TenantID, "admin")
              ...
          } else {
              c.JSON(http.StatusUnauthorized, gin.H{"error": "unauthorized"})
              return
          }
          

Test
    ✅ For beta tenant:
    curl -X POST http://localhost:8080/login \
      -H "Content-Type: application/json" \
      -d '{"username":"bob","password":"pass456","tenant_id":"beta"}'

✅ Access protected route:
curl -X GET http://localhost:8080/api/dashboard \
  -H "Authorization: Bearer <TOKEN>" \
  -H "X-Tenant-ID: beta"


